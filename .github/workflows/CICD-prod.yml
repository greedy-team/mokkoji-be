name: CI/CD for prod

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  ci:
    runs-on: ubuntu-22.04
    env:
      working-directory: .

    steps:
      - name: 체크아웃
        uses: actions/checkout@v3

      # 브랜치 필터링 확인
      - name: Validate branch for tag
        run: |
          echo "Checking if tag is from the prod branch..."
          git fetch origin prod --depth=1
          COMMIT_HASH=$(git rev-parse HEAD)
          PROD_HASH=$(git rev-parse origin/prod)
          if [ "$COMMIT_HASH" != "$PROD_HASH" ]; then
            echo "Tag is not from the prod branch. Exiting workflow."
            exit 1
          fi

      - name: JDK 21 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: application.yml 생성
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.CICD_APPLICATION }}" > ./application.yml
        working-directory: ${{ env.working-directory }}

      - name: 빌드
        run: |
          chmod +x gradlew
          ./gradlew -x test build
        working-directory: ${{ env.working-directory }}
        shell: bash

      - name: 도커 설정
        uses: docker/setup-buildx-action@v2.9.1

      - name: 도커 허브 로그인
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESSTOKEN }}

      - name: 도커 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: mokkojiteam/mokkoji

      - name: 도커 컴포즈 파일 서버 전송
        uses: appleboy/scp-action@master
        with:
          username: ubuntu
          host: ${{ secrets.SERVER_IP  }}
          key: ${{ secrets.SERVER_KEY }}
          source: "docker-compose.yml"
          target: "~"

  cd:
    needs: ci
    runs-on: ubuntu-22.04

    steps:
      - name: 도커 컨테이너 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            cd ~
            ./deploy.sh
