plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.greedy'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'


    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'


    // HTTP 클라이언트 요청
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.9.3'

    // HTML 파싱
    implementation 'org.jsoup:jsoup:1.15.3'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // 메일 전송
    implementation 'org.springframework.boot:spring-boot-starter-mail:3.4.2'

    // AWS S3
    implementation 'software.amazon.awssdk:bom:2.21.0'
    implementation 'software.amazon.awssdk:s3:2.21.0'

    // 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.rest-assured:rest-assured:5.1.1'

    // 모니터링
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

tasks.named('test') {
    useJUnitPlatform()
}

//JaCoCo 플러그인 설정
jacoco {
    toolVersion = '0.8.12'
    reportsDirectory = layout.buildDirectory.dir("reports/jacoco")
}

// 테스트 실행 후 자동으로 코드 커버리지 보고서를 생성하려면 다음과 같이 설정할 수 있습니다.
test {
    // test 실행 후 보고서 생성
    finalizedBy(jacocoTestReport)
}

jacocoTestReport {
    // test가 실행된 후에만 보고서 생성
    dependsOn(test)

    // JaCoCo 보고서 구성
    // XML 및 CSV 보고서는 생성되지 않고, HTML 보고서는 jacocoHtml 디렉터리에 저장
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}


jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
